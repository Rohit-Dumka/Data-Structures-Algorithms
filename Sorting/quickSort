Quick Sort Pivot Algorithm: 

Step 1 − Choose the highest index value has pivot
Step 2 − Take two variables to point left and right of the list excluding pivot
Step 3 − left points to the low index
Step 4 − right points to the high
Step 5 − while value at left is less than pivot move right
Step 6 − while value at right is greater than pivot move left
Step 7 − if both step 5 and step 6 does not match swap left and right
Step 8 − if left ≥ right, the point where they met is new pivot

Quick Sort Algorithm

Step 1 − Make the right-most index value pivot
Step 2 − partition the array using pivot value
Step 3 − quicksort left partition recursively
Step 4 − quicksort right partition recursively


#include <iostream>
#include <vector>
using namespace std;
int partition(vector<int>&arr,int low,int high){
    int pivot=arr[low];
    int i=low;
    int j=high;
    
    while(i<j){
        while(arr[i]<=pivot && i<=high-1)
            i++;
        while(arr[j]>pivot && j>=low+1)
            j--;
        if(i<j)
            swap(arr[i],arr[j]);
    }
    swap(arr[low],arr[j]); //swapping pivot at it's correct position
    return j; //pivot's index
}
void qs(vector<int>&arr,int low,int high){
    if(low<high){
        int pIndex=partition(arr,low,high);
        qs(arr,low,pIndex-1);
        qs(arr,pIndex+1,high);
    }
}
vector<int> quickSort(vector<int>arr){
    qs(arr,0,arr.size()-1);
    return arr;
}
int main() {
    vector<int>arr={4,6,2,5,7,9,1,3};
    int n=arr.size();
    cout<<"initial array: "<<endl;
    for(int i:arr)
        cout<<i<<" ";
    cout<<endl;
    
    arr=quickSort(arr);
    cout<<"after using quick sort: "<<endl;
    for(int i:arr)
        cout<<i<<" ";
}
